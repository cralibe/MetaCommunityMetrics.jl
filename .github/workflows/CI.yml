name: CI
on:
  push:
    branches:
      - main
    tags: ['*']
  pull_request:
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    permissions:
      actions: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        version: ['1.6', '1.9', 'nightly']  # Julia versions
        os: [ubuntu-latest]  # OS (you can add others like windows-latest and macos-latest)
        arch: [x64]  # Architecture
        dataframes-version: ['1.0', '1.6']  # DataFrames version range ">= 1.0, < 2.0"
        distributions-version: ['0.16', '0.25.111']  # Distributions version range ">= 0.25, < 1.0"
        statsbase-version: ['0.34', '0.34.3']  # StatsBase version range ">= 0.34, < 1.0"
    steps:
      - uses: actions/checkout@v4

      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}

      - name: Install dependencies
        run: |
          julia -e 'import Pkg; Pkg.instantiate(); Pkg.add(Pkg.PackageSpec(name="DataFrames", version="${{ matrix.dataframes-version }}")); Pkg.add(Pkg.PackageSpec(name="Distributions", version="${{ matrix.distributions-version }}")); Pkg.add(Pkg.PackageSpec(name="StatsBase", version="${{ matrix.statsbase-version }}")); Pkg.add("Coverage")'
        
      - name: Debug Pkg status
        run: julia -e 'import Pkg; Pkg.status()'

      - uses: julia-actions/cache@v2
        with:
          key: ${{ runner.os }}-julia-${{ matrix.version }}-${{ hashFiles('Project.toml', 'Manifest.toml') }}
          restore-keys: |
            ${{ runner.os }}-julia-${{ matrix.version }}-

      - uses: julia-actions/julia-buildpkg@v1

      - name: Debug build
        run: julia -e 'import Pkg; Pkg.build()'
      
      - uses: julia-actions/julia-runtest@v1
        with:
          coverage: true  # Enable coverage

      - name: Test loading sample data
        run: julia --project=. -e 'using MetaCommunityMetrics; df = load_sample_data(); println(df)'

      - name: Generate LCOV Report
        run: julia -e 'using Coverage; cov = process_folder("test"); LCOV.writefile("lcov.info", cov)'

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: lcov.info
          fail_ci_if_error: true
