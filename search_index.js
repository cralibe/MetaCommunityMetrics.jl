var documenterSearchIndex = {"docs":
[{"location":"OccupiedPatchesProportion/#Occupied-Patches-Proportion-Function","page":"Occupied Patches Proportion Function","title":"Occupied Patches Proportion Function","text":"","category":"section"},{"location":"OccupiedPatchesProportion/","page":"Occupied Patches Proportion Function","title":"Occupied Patches Proportion Function","text":"CurrentModule = MetaCommunityMetrics","category":"page"},{"location":"OccupiedPatchesProportion/","page":"Occupied Patches Proportion Function","title":"Occupied Patches Proportion Function","text":"The Occupied Patches Proportion function in MetaCommunityMetrics provides a simple yet powerful metric for understanding the distribution and prevalence of species across different habitat patches within a metacommunity. By calculating the proportion of patches occupied by each species, this function helps ecologists assess the spatial extent of species distributions and identify potential patterns of rarity or commonness across the landscape.","category":"page"},{"location":"OccupiedPatchesProportion/","page":"Occupied Patches Proportion Function","title":"Occupied Patches Proportion Function","text":"This function draws on the concepts discussed by Ehrlén & Eriksson (2000) in their study on dispersal limitation and patchy occupancy in forest herbs. According to their findings, low occupancy may indicate dispersal limitation or strong competition, while high occupancy could suggest mass effects due to high dispersal rates or the ability to thrive in various conditions.","category":"page"},{"location":"OccupiedPatchesProportion/#Reference","page":"Occupied Patches Proportion Function","title":"Reference","text":"","category":"section"},{"location":"OccupiedPatchesProportion/","page":"Occupied Patches Proportion Function","title":"Occupied Patches Proportion Function","text":"Ehrlén, J., & Eriksson, O. (2000). Dispersal Limitation and Patchy Occupancy in Forest Herbs. Ecology, 81(6), 1667-1674.","category":"page"},{"location":"OccupiedPatchesProportion/#Functionality-Overview","page":"Occupied Patches Proportion Function","title":"Functionality Overview","text":"","category":"section"},{"location":"OccupiedPatchesProportion/","page":"Occupied Patches Proportion Function","title":"Occupied Patches Proportion Function","text":"The Occupied Patches Proportion metric quantifies the proportion of habitat patches in which a species is present. This information is crucial for understanding species distributions, particularly in fragmented landscapes or patchy environments where species may not occupy all available habitat. The OPP metric can be used to identify widespread species, which occupy a large number of patches, as well as rare species, which are restricted to only a few patches.","category":"page"},{"location":"OccupiedPatchesProportion/","page":"Occupied Patches Proportion Function","title":"Occupied Patches Proportion Function","text":"After calculating the proportion of patches occupied for each species, the species’ mean, minimum, and maximum occupancy can be derived. These values are valuable indicators of ecological processes:","category":"page"},{"location":"OccupiedPatchesProportion/","page":"Occupied Patches Proportion Function","title":"Occupied Patches Proportion Function","text":"Low Occupancy: May indicate dispersal limitation or strong competition among species. Such patterns could suggest that certain species struggle to colonize or persist in many patches.\nHigh Occupancy: Could point to mass effects, where species are abundant in many patches, possibly due to high dispersal rates or the ability to thrive across a range of conditions.","category":"page"},{"location":"OccupiedPatchesProportion/#The-Function","page":"Occupied Patches Proportion Function","title":"The Function","text":"","category":"section"},{"location":"OccupiedPatchesProportion/","page":"Occupied Patches Proportion Function","title":"Occupied Patches Proportion Function","text":"prop_patches","category":"page"},{"location":"OccupiedPatchesProportion/#MetaCommunityMetrics.prop_patches","page":"Occupied Patches Proportion Function","title":"MetaCommunityMetrics.prop_patches","text":"prop_patches(presence::AbstractVector, species::Union{AbstractVector, String}, patch::Union{AbstractVector, String}) -> DataFrame\n\nCalculate the proportion of patches occupied by each species and summarize the results.\n\nThis function takes three vectors: presence, species, and patch, and performs the following steps:\n\nArguments:     presence::AbstractVector: A vector indicating the presence (1) or absence (0) of a species in a patch.     species::Union{AbstractVector, String}: A vector of species names.     patch::Union{AbstractVector, String}: A vector of patch identifiers.\n\nReturns:     DataFrame: A DataFrame containing the mean, minimum, and maximum proportion of patches                 occupied across all species.\n\nExample:     julia     presence = [1, 0, 1, 0, 1]     species = [\"A\", \"A\", \"B\", \"B\", \"C\"]     patch = [1, 2, 1, 2, 1]     prop_patches(presence, species, patch)     1×3 DataFrame      Row │ meanproppatches  minproppatches  maxproppatches      ─────┼──────────────────────────────────────────────────────        1 │              0.666667             0.5                1.0\n\n\n\n\n\n","category":"function"},{"location":"BetaDiversity/#Beta-Diversity-Functions","page":"Beta Diverisity Functions","title":"Beta Diversity Functions","text":"","category":"section"},{"location":"BetaDiversity/","page":"Beta Diverisity Functions","title":"Beta Diverisity Functions","text":"CurrentModule = MetaCommunityMetrics","category":"page"},{"location":"BetaDiversity/","page":"Beta Diverisity Functions","title":"Beta Diverisity Functions","text":"The beta diversity functions in MetaCommunityMetrics are adapted from the beta.div.comp function in the R package adespatial. These methods were originally developed and detailed by Pierre Legendre in his 2014 paper, \"Interpreting the replacement and richness difference components of beta diversity\" (Global Ecology and Biogeography, 23, 1324-1334). The implementation in Julia provides a more efficient means to compute these metrics, particularly for large-scale datasets, while maintaining the robustness of the original methodology.","category":"page"},{"location":"BetaDiversity/","page":"Beta Diverisity Functions","title":"Beta Diverisity Functions","text":"Beta diversity is a fundamental concept in ecology that quantifies the variation in species composition between different habitats, plots, or over time. In the context of metacommunity analysis, beta diversity functions help to assess how community composition changes spatially across different locations or temporally within a given location.","category":"page"},{"location":"BetaDiversity/#Choosing-the-Right-Function","page":"Beta Diverisity Functions","title":"Choosing the Right Function","text":"","category":"section"},{"location":"BetaDiversity/","page":"Beta Diverisity Functions","title":"Beta Diverisity Functions","text":"Use beta_diversity when you want a general overview of diversity across your dataset.\nOpt for mean_spatial_beta_div when your focus is on comparing diversity between different spatial locations.\nSelect mean_temporal_beta_div to track how diversity changes over time within the same location.","category":"page"},{"location":"BetaDiversity/#The-Functions","page":"Beta Diverisity Functions","title":"The Functions","text":"","category":"section"},{"location":"BetaDiversity/","page":"Beta Diverisity Functions","title":"Beta Diverisity Functions","text":"beta_diversity\nmean_spatial_beta_div\nmean_temporal_beta_div","category":"page"},{"location":"BetaDiversity/#MetaCommunityMetrics.beta_diversity","page":"Beta Diverisity Functions","title":"MetaCommunityMetrics.beta_diversity","text":"beta_diversity(mat::Matrix; quant::Bool) -> DataFrame\n\nCalculate beta diversity for a given biodiversity data. This function supports both binary (presence/absence) and quantitative data. For binary data, the function calculates Podani family, Jaccard-based indices. For quantitative data, the function calculates Podani family, Ruzicka-based indices. The function returns a DataFrame containing the calculated beta diversity indices.  Empty patches have to be removed before calculation. Please refer to Example.jl for more details.\n\nArguments\n\nmat::Matrix: A matrix where each row represents a sample and each column represents a species. The elements of the matrix should represent the presence/absence or abundance of species.\nquant::Bool: A boolean flag that indicates whether the data is quantitative. Default is false, which means the data is treated as binary.\n\nReturns\n\nDataFrame: A DataFrame with the following columns:\nBDtotal: Total beta diversity, which captures the overall dissimilarity between local communities.\nRepl: Replacement component of diversity, which reflects how many species are different in one site compared to another, ignoring the species that are mere additions or subtractions.\nRichDif: Richness difference component of diversity, which captures the disparity in biodiversity in terms of the count of species present, without taking into account the specific identities or distributions of those species.\n\n\n\n\n\n","category":"function"},{"location":"BetaDiversity/#MetaCommunityMetrics.mean_spatial_beta_div","page":"Beta Diverisity Functions","title":"MetaCommunityMetrics.mean_spatial_beta_div","text":"mean_spatial_beta_div(abundance::AbstractVector, time::AbstractVector, patch::Union{AbstractVector, String}, species::Union{AbstractVector, String}; quant::Bool) -> DataFrame\n\nCalculate the mean spatial beta diversity components of a metacommunity over time based on species abundances or presence-absences.\n\nArguments\n\nabundance::Vector: A vector containing abundance data for each species across different samples.\ntime::Vector: A vector indicating the time each sample was taken.\npatch::Vector: A vector indicating the spatial location (patch) of each sample.\nspecies::Vector: A vector indicating the species associated with each abundance entry.\nquant::Bool: Optional boolean flag to indicate whether the data should be treated as quantitative (default is false, treating data as binary presence/absence).\n\nReturns\n\nDataFrame: A DataFrame containing the mean values of total beta diversity, replacement, and richness difference components across all time points. Columns are mean_spatial_BDtotal, mean_spatial_Repl, and mean_spatial_RichDif.\n\n\n\n\n\n","category":"function"},{"location":"BetaDiversity/#MetaCommunityMetrics.mean_temporal_beta_div","page":"Beta Diverisity Functions","title":"MetaCommunityMetrics.mean_temporal_beta_div","text":"mean_temporal_beta_div(abundance::AbstractVector, time::AbstractVector, patch::Union{AbstractVector, String}, species::Union{AbstractVector, String};quant::Bool) -> DataFrame\n\nCalculate the mean temporal beta diversity components acorss all patches based on species abundances or presence-absences.\n\nArguments\n\nabundance::Vector: A vector containing abundance data for each species across different samples.\ntime::Vector: A vector indicating the time each sample was taken.\npatch::Vector: A vector indicating the spatial location (patch) of each sample.\nspecies::Vector: A vector indicating the species associated with each abundance entry.\nquant::Bool: Optional boolean flag to indicate whether the data should be treated as quantitative (default is false, treating data as binary presence/absence).\n\nReturns\n\nDataFrame: A DataFrame containing the mean values of total beta diversity, replacement, and richness difference components across all pactches. Columns are mean_temporal_BDtotal, mean_temporal_Repl, and mean_temporal_RichDif.\n\n\n\n\n\n","category":"function"},{"location":"VariabilityMetrics/#Variability-Metrics-Functions","page":"Variability Metrics Functions","title":"Variability Metrics Functions","text":"","category":"section"},{"location":"VariabilityMetrics/","page":"Variability Metrics Functions","title":"Variability Metrics Functions","text":"CurrentModule = MetaCommunityMetrics","category":"page"},{"location":"VariabilityMetrics/","page":"Variability Metrics Functions","title":"Variability Metrics Functions","text":"The variability metrics functions in MetaCommunityMetrics are designed to capture changes in dispersal and density-dependent biotic interactions by investigating temporal variability and synchrony across spatial scales and organizational levels within a metacommunity. These functions are based on the work of Wang et al. (2019), which provides a framework for quantifying variability at different scales and contexts within a community.","category":"page"},{"location":"VariabilityMetrics/#Overview","page":"Variability Metrics Functions","title":"Overview","text":"","category":"section"},{"location":"VariabilityMetrics/","page":"Variability Metrics Functions","title":"Variability Metrics Functions","text":"In MetaCommunityMetrics, the CV_meta_simple function is directly adapted from the R function var.partition in Wang et al. (2019). This function is designed with computational efficiency in mind, particularly for large datasets, by avoiding the calculation of all covariances between species. This approach ensures faster performance while still providing valuable insights into variability across different scales within a metacommunity.","category":"page"},{"location":"VariabilityMetrics/","page":"Variability Metrics Functions","title":"Variability Metrics Functions","text":"In contrast, the CV_meta function extends the analysis by including the calculation of all covariances between species, offering a more detailed and comprehensive examination of variability. This approach captures interactions between species that may be overlooked by more streamlined methods. While the CV_meta function provides a richer analysis, the CV_meta_simple function remains a valuable tool when computational efficiency is a priority.","category":"page"},{"location":"VariabilityMetrics/","page":"Variability Metrics Functions","title":"Variability Metrics Functions","text":"These metrics are designed to quantify variability at different scales and contexts within the community:","category":"page"},{"location":"VariabilityMetrics/","page":"Variability Metrics Functions","title":"Variability Metrics Functions","text":"Local-scale average species variability (CV_s_l)\nRegional-scale average species variability (CV_s_r)\nLocal-scale average community variability (CV_c_l)\nRegional-scale community variability (CV_c_r)","category":"page"},{"location":"VariabilityMetrics/","page":"Variability Metrics Functions","title":"Variability Metrics Functions","text":"The variability metrics are calculated as follows:","category":"page"},{"location":"VariabilityMetrics/","page":"Variability Metrics Functions","title":"Variability Metrics Functions","text":"The variability metrics CV_s_l, CV_s_r, CV_c_l, and CV_c_r are set to zero whenever the mean abundance equals zero at any combination of spatial scales (a patch/all patches) and species number (a species/the whole community). This approach allows us to assess the impact of spatial scale on variability and to understand how different factors influence community dynamics across scales.","category":"page"},{"location":"VariabilityMetrics/#Reference","page":"Variability Metrics Functions","title":"Reference","text":"","category":"section"},{"location":"VariabilityMetrics/","page":"Variability Metrics Functions","title":"Variability Metrics Functions","text":"Wang, S., et al. 2019. Stability and synchrony across ecological hierarchies in heterogeneous metacommunities: linking theory to data. Ecography, 42(6): 1200-1211. doi: 10.1111/ecog.04290.","category":"page"},{"location":"VariabilityMetrics/#The-Function","page":"Variability Metrics Functions","title":"The Function","text":"","category":"section"},{"location":"VariabilityMetrics/","page":"Variability Metrics Functions","title":"Variability Metrics Functions","text":"CV_meta\nCV_meta_simple","category":"page"},{"location":"VariabilityMetrics/#MetaCommunityMetrics.CV_meta","page":"Variability Metrics Functions","title":"MetaCommunityMetrics.CV_meta","text":"CV_meta(abundance::AbstractVector, time::AbstractVector, patch::Union{AbstractVector, String}, species::Union{AbstractVector, String}) -> DataFrame\n\nCalculates various coefficients of variation (CV) for species and community biomass at both local and regional scales within a metacommunity.\n\nArguments\n\nabundance::AbstractVector: A vector representing the abundance of species.\ntime::AbstractVector: A vector representing the time points at which the abundance measurements were taken.\npatch::Union{AbstractVector, String}: A vector or single value representing the patch or plot identifier.\nspecies::Union{AbstractVector, String}: A vector or single value representing the species identifier.\n\nReturns\n\nCV_summary_df::DataFrame: A DataFrame containing the following columns:\nCV_s_l: Local-scale average species variability.\nCV_s_r: Regional-scale average species variability.\nCV_c_l: Local-scale average community variability.\nCV_c_r: Regional-scale community variability.\n\nDetails\n\nThis function calculates the coefficients of variation (CV) for species and community biomass at both local and regional scales. The calculation involves several steps:\n\nReorganization of Data: The input data is organized into a DataFrame with columns for abundance, time, plot, and species.\nMean Calculations: Temporal mean species abundance is calculated for each species in each patch, as well as the overall temporal mean biomass.\nTemporal Variance Calculations: Temporal variance is calculated for each species within patches, for species across patches, for the community biomass within patches, and for the overall metacommunity biomass.\nCV Calculations: The coefficients of variation are calculated for species and community biomass at both local and regional scales.\nOutput: The results are returned in a DataFrame summarizing the CVs for local and regional scales.\n\nExample\n\nabundance = [10, 20, 15, 30, 25]\ntime = [1, 1, 2, 2, 3]\npatch = [\"A\", \"A\", \"A\", \"B\", \"B\"]\nspecies = [\"Sp1\", \"Sp2\", \"Sp1\", \"Sp2\", \"Sp1\"]\n\nCV_summary_df = CV_meta(abundance, time, patch, species)#This will return a DataFrame containing the calculated CV values for the input data.\n\n\n\n\n\n\n","category":"function"},{"location":"VariabilityMetrics/#MetaCommunityMetrics.CV_meta_simple","page":"Variability Metrics Functions","title":"MetaCommunityMetrics.CV_meta_simple","text":"CV_meta_simple(abundance::AbstractVector, time::AbstractVector, patch::Union{AbstractVector, String}, species::Union{AbstractVector, String}) -> DataFrame\n\nCalculates coefficients of variation (CV) for species and community biomass at both local and regional scales within a metacommunity, using a simpler approach optimized for handling larger datasets.\n\nArguments\n\nabundance::AbstractVector: A vector representing the abundance of species.\ntime::AbstractVector: A vector representing the time points at which the abundance measurements were taken.\npatch::Union{AbstractVector, String}: A vector or single value representing the patch or plot identifier.\nspecies::Union{AbstractVector, String}: A vector or single value representing the species identifier.\n\nReturns\n\nCV_summary_df::DataFrame: A DataFrame containing the following columns:\nCV_s_l: Local-scale average species variability.\nCV_s_r: Regional-scale average species variability.\nCV_c_l: Local-scale average community variability.\nCV_c_r: Regional-scale community variability.\n\nDetails\n\nThis function is a simplified version of the CV_meta function, designed to efficiently handle larger datasets by avoiding complex covariance calculations. The steps include:\n\nReorganization of Data: The input data is organized into a DataFrame with columns for abundance, time, plot, and species, and then transformed into a 3D abundance matrix.\nTotal Abundance Calculations: The function calculates total abundances for species across time, within each patch, and for the entire metacommunity.\nStandard Deviation (SD) Calculations: Temporal standard deviations of abundance are computed for the entire metacommunity, each patch, and each species.\nCV Calculations: The coefficients of variation are calculated for species and community biomass at both local and regional scales.\nOutput: The results are returned in a DataFrame summarizing the CVs for local and regional scales.\n\nExample\n\nabundance = [10, 20, 15, 30, 25]\ntime = [1, 1, 2, 2, 3]\npatch = [\"A\", \"A\", \"A\", \"B\", \"B\"]\nspecies = [\"Sp1\", \"Sp2\", \"Sp1\", \"Sp2\", \"Sp1\"]\n\nCV_summary_df = CV_meta_simple(abundance, time, patch, species) #This will return a DataFrame containing the calculated CV values for the input data.\n\n\n\n\n\n","category":"function"},{"location":"DNCI/#Dispersal-Niche-Continuum-Index-(DNCI)-Functions","page":"Dispersal-Niche Continuum Index (DNCI) Functions","title":"Dispersal-Niche Continuum Index (DNCI) Functions","text":"","category":"section"},{"location":"DNCI/","page":"Dispersal-Niche Continuum Index (DNCI) Functions","title":"Dispersal-Niche Continuum Index (DNCI) Functions","text":"CurrentModule = MetaCommunityMetrics","category":"page"},{"location":"DNCI/","page":"Dispersal-Niche Continuum Index (DNCI) Functions","title":"Dispersal-Niche Continuum Index (DNCI) Functions","text":"The Dispersal-Niche Continuum Index (DNCI) functions in MetaCommunityMetrics are adapted from the R package DNCImper: Assembly process identification based on SIMPER analysis. These methods, originally developed by Clarke in 1993 and later refined by Gibert & Escarguel in 2019 and Vilmi, Gibert et al. in 2021, offer powerful tools for identifying the processes underlying species assembly in metacommunities.","category":"page"},{"location":"DNCI/#Background","page":"Dispersal-Niche Continuum Index (DNCI) Functions","title":"Background","text":"","category":"section"},{"location":"DNCI/","page":"Dispersal-Niche Continuum Index (DNCI) Functions","title":"Dispersal-Niche Continuum Index (DNCI) Functions","text":"The DNCI functions is built around the Per-SIMPER and DNCI analyses. PerSIMPER, based on the Similarity Percentage (SIMPER) analysis developed by Clarke (1993), assesses the contribution of individual taxa to overall dissimilarity (OAD) between groups of assemblages. PerSIMPER enhances this by comparing empirical SIMPER plots with randomized plots generated through matrix permutation, which helps identify whether niche, dispersal, or both processes are driving community assembly.","category":"page"},{"location":"DNCI/","page":"Dispersal-Niche Continuum Index (DNCI) Functions","title":"Dispersal-Niche Continuum Index (DNCI) Functions","text":"The DNCI (Dispersal-Niche Continuum Index) further extends this approach by transforming the qualitative results of PerSIMPER into a quantitative index, providing a straightforward measure of the influence of niche and dispersal processes on community structure.","category":"page"},{"location":"DNCI/#Functionality-Overview","page":"Dispersal-Niche Continuum Index (DNCI) Functions","title":"Functionality Overview","text":"","category":"section"},{"location":"DNCI/","page":"Dispersal-Niche Continuum Index (DNCI) Functions","title":"Dispersal-Niche Continuum Index (DNCI) Functions","text":"The DNCI functions in MetaCommunityMetrics allow you to analyze the processes driving species assembly within your dataset. By comparing empirical data with randomized permutations, you can determine the extent to which niche and dispersal processes have influenced the structure of metacommunities.","category":"page"},{"location":"DNCI/#The-Functions","page":"Dispersal-Niche Continuum Index (DNCI) Functions","title":"The Functions","text":"","category":"section"},{"location":"DNCI/","page":"Dispersal-Niche Continuum Index (DNCI) Functions","title":"Dispersal-Niche Continuum Index (DNCI) Functions","text":"create_clusters: Groups sampling locations based on their spatial attributes and species richness, which can then be used to assess DNCI.\nplot_clusters: Visualizes the clusters created, allowing for an intuitive understanding of spatial groupings.\nDNCI_multigroup: Computes the Dispersal-Niche Continuum Index (DNCI) across multiple groups, helping to quantify the relative influence of niche versus dispersal processes.","category":"page"},{"location":"DNCI/","page":"Dispersal-Niche Continuum Index (DNCI) Functions","title":"Dispersal-Niche Continuum Index (DNCI) Functions","text":"create_clusters\nplot_clusters\nDNCI_multigroup","category":"page"},{"location":"DNCI/#MetaCommunityMetrics.create_clusters","page":"Dispersal-Niche Continuum Index (DNCI) Functions","title":"MetaCommunityMetrics.create_clusters","text":"create_clusters(time::Vector{Int}, latitude::Vector{Float64}, longitude::Vector{Float64}, patch::Vector{Int}, total_richness::Vector{Int}) -> Dict{Int, DataFrame}\n\nCreate clusters for each unique time step in a dataset. Only presnece-absence data can be used.\n\nArguments\n\ntime::Vector: A vector indicating the time each sample was taken.\nlatitude::Vector: A vector indicating the latitude of each sample.\nlongitude::Vector: A vector indicating the longitude of each sample.\npatch::Vector: A vector indicating the spatial location (patch) of each sample.\ntotal_richness::Vector: A vector indicating the total species richness at each plot at each time step.\n\nReturns\n\nDict{Int, DataFrame}: A dictionary where each key is a unique time from the dataset and each value is a DataFrame for that time with an added Group column indicating the assigned cluster.\n\nDetails\n\nThis function performs hierarchical clustering on geographical coordinates for each unique time step. It aims to balance the clusters based on the number of sites and species richness, ensuring that no group has less than five sites and that there are at least two groups. If conditions for clustering balance are not met (like groups having less than five sites or only one group), it iteratively adjusts the clusters by reassigning sites to improve group balance.\n\n\n\n\n\n","category":"function"},{"location":"DNCI/#MetaCommunityMetrics.plot_clusters","page":"Dispersal-Niche Continuum Index (DNCI) Functions","title":"MetaCommunityMetrics.plot_clusters","text":"plot_clusters(latitude::Vector{Float64}, longitude::Vector{Float64}, group::Union{AbstractVector, String})\n\nPlots clusters of data points on a scatter plot using their geographic coordinates and cluster assignments.\n\nArguments\n\nlatitude::Vector{Float64}: A vector of latitude coordinates.\nlongitude::Vector{Float64}: A vector of longitude coordinates.\ngroup::Union{AbstractVector, String}: A vector or string indicating the cluster assignments for each data point.\n\nDetails\n\nThe function assigns a unique color to each cluster and plots the points based on their geographic coordinates.\nThe points are colored according to their cluster assignment.\nThe plot includes black borders around the markers for better visibility.\n\nExample\n\nlatitudes = [35.0, 35.0, 35.5, 35.5, 35.5, 36.0, 36.0]\nlongitudes = [-110.0, -109.5, -109.5, -109.0, -108.0, -109.5, -108.0]\ngroups = [1, 1, 1, 1, 2, 1, 2]\n\nplot_clusters(latitudes, longitudes, groups)\n\n\n\n\n\n","category":"function"},{"location":"DNCI/#MetaCommunityMetrics.DNCI_multigroup","page":"Dispersal-Niche Continuum Index (DNCI) Functions","title":"MetaCommunityMetrics.DNCI_multigroup","text":"DNCI_multigroup(comm::Matrix, groups::Vector, Nperm::Int=1000, count::Bool=true) -> DataFrame\n\nCalculates the dispersal-niche continuum index (DNCI) for multiple groups, a metric proposed by Vilmi(2021) (doi: 10.1111/ecog.05356).\n\nArguments\n\ncomm::Matrix: A presence-absence data matrix where rows represent observations (e.g., sites or samples) and columns represent species.\ngroups::Vector: A vector indicating the group membership for each row in the comm matrix.\nNperm::Int=1000: The number of permutations for significance testing. Default is 1000.\ncount::Bool=true: A flag indicating whether the numeber of permutations is printed. Default is false.\n\nReturns\n\nDataFrame: A DataFrame containing the DNCI results for each pair of groups.\n\nExamples\n\n# Example usage of DNCI_multigroup\ncomm = [1 0 0 1 0;\n        1 1 0 0 0;\n        0 1 1 0 0;\n        0 0 1 1 1;\n        1 0 0 0 1;\n        0 1 1 0 1]\n\ngroups = [\"A\", \"A\", \"B\", \"B\", \"C\", \"C\"]\nNperm = 1000\ncount = true\n\nresult = DNCI_multigroup(comm, groups, Nperm, count)\nprintln(result)\n\n\n\n\n\n","category":"function"},{"location":"NicheOverlapIndex/#Niche-Overlap-Index-Function","page":"Niche Overlap Index Function","title":"Niche Overlap Index Function","text":"","category":"section"},{"location":"NicheOverlapIndex/","page":"Niche Overlap Index Function","title":"Niche Overlap Index Function","text":"CurrentModule = MetaCommunityMetrics","category":"page"},{"location":"NicheOverlapIndex/","page":"Niche Overlap Index Function","title":"Niche Overlap Index Function","text":"Niche overlap refers to the extent to which different species use the same resources or occupy similar ecological niches. High niche overlap might indicate intense competition, whereas low overlap suggests niche differentiation, allowing species to coexist by minimizing direct competition.","category":"page"},{"location":"NicheOverlapIndex/","page":"Niche Overlap Index Function","title":"Niche Overlap Index Function","text":"To capture the changes in density-independent abiotic response, also known as niche breadth, this implementation uses Pianka's Niche Overlap Index, as suggested by Pianka (1973). The summary statistics of this index include the mean, maximum, and minimum values across all species pairs, providing a comprehensive understanding of niche sharing within the community. Key References","category":"page"},{"location":"NicheOverlapIndex/","page":"Niche Overlap Index Function","title":"Niche Overlap Index Function","text":"While the specific method implemented here is adapted to the Julia language for efficiency and scalability, the concept of niche overlap has a long history in ecological studies. Researchers interested in the theoretical foundations of niche overlap and its applications in community ecology may refer to the following works:","category":"page"},{"location":"NicheOverlapIndex/","page":"Niche Overlap Index Function","title":"Niche Overlap Index Function","text":"MacArthur, R., & Levins, R. (1967). \"The Limiting Similarity, Convergence, and Divergence of Coexisting Species.\" The American Naturalist, 101(921), 377-385.\nPianka, E. R. (1974). \"Niche overlap and diffuse competition.\" Proceedings of the National Academy of Sciences, 71(5), 2141-2145.\nPianka, E. R. (1973). \"The Structure of Lizard Communities.\" Annual Review of Ecology and Systematics, 4(1), 53-74.","category":"page"},{"location":"NicheOverlapIndex/#Functionality-Overview","page":"Niche Overlap Index Function","title":"Functionality Overview","text":"","category":"section"},{"location":"NicheOverlapIndex/","page":"Niche Overlap Index Function","title":"Niche Overlap Index Function","text":"The Niche Overlap Index functions in MetaCommunityMetrics provide a robust framework for calculating niche overlap based on species abundance or presence-absence data. These functions allow you to evaluate how species share ecological space within a metacommunity, offering valuable insights into community dynamics and species interactions.","category":"page"},{"location":"NicheOverlapIndex/#The-Function","page":"Niche Overlap Index Function","title":"The Function","text":"","category":"section"},{"location":"NicheOverlapIndex/","page":"Niche Overlap Index Function","title":"Niche Overlap Index Function","text":"niche_overlap: This function calculates the Niche Overlap Index for a given set of species across different patches. It provides metrics for mean, minimum, and maximum niche overlap, allowing for a comprehensive assessment of niche sharing within the community.","category":"page"},{"location":"NicheOverlapIndex/","page":"Niche Overlap Index Function","title":"Niche Overlap Index Function","text":"niche_overlap","category":"page"},{"location":"NicheOverlapIndex/#MetaCommunityMetrics.niche_overlap","page":"Niche Overlap Index Function","title":"MetaCommunityMetrics.niche_overlap","text":"niche_overlap(abundance::AbstractVector, species::Union{AbstractVector, String}, patch::Union{AbstractVector, String}, time::AbstractVector) -> DataFrame\n\nCalculates the overall mean, maximum, and minimum values of the niche overlap index from all species pairs in the provided data.\n\nArguments\n\nabundance::AbstractVector: Vector representing the abundance of species.\nspecies::Union{AbstractVector, String}: Vector or string representing species names or IDs.\npatch::Union{AbstractVector, String}: Vector or string representing patch names or IDs.\ntime::AbstractVector: Vector representing the time points.\n\nDescription\n\nThe niche overlap index is calculated based on the method suggested by Pianka (1973), with the assumption that the proportional use of a species at a specific site and time equals its relative abundance at that site and time. To determine relative abundance, the abundance of each species in a particular patch is divided by the total abundance of that species across all patches and times.\n\nReturns\n\nDataFrame: A DataFrame containing the overall mean, maximum, and minimum values of the niche overlap index from all species pairs.\n\nExample\n\n```julia df = DataFrames.DataFrame(     N = [10, 20, 5, 15, 10, 30],     Species = [\"A\", \"A\", \"B\", \"B\", \"C\", \"C\"],     Time = [1, 2, 1, 2, 1, 2],     Patch = [\"X\", \"Y\", \"X\", \"Y\", \"X\", \"Y\"] )\n\nresult = niche_overlap(df.N, df.Species, df.Patch, df.Time) println(result)\n\n\n\n\n\n","category":"function"},{"location":"#MetaCommunityMetrics.jl","page":"Home","title":"MetaCommunityMetrics.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A collection of tools and utilities for analyzing meta-communities in Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for MetaCommunityMetrics. Here you can find guides and reference material on how to use the functions.","category":"page"},{"location":"#An-Overview","page":"Home","title":"An Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is a comprehensive toolkit designed to characterize the spatiotemporal structure and dynamics of a metacommunity—a network of communities linked by the dispersal of multiple, interacting species, each with unique niche breadths. It includes functions to calculate a range of specific metrics, which have been previously implemented in R and proven valuable for metacommunity analysis. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"However, they come with high computational costs, especially for large species community datasets. To address this issue, MetaCommunityMetrics.jl was developed in Julia, a programming language known for its efficiency in handling computationally intensive tasks. This implementation significantly improves the efficiency of calculating these metrics, making it a powerful tool for metacommunity analysis. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"These metrics include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Averaged beta diversity decomposition in space/time: total diversity, species replacement (turnover), and richness differences for both presence-absence and abundance data\nDispersal-niche continuum index to evaluate the degree to which communities are influenced by dispersal processes and niche breadth\nNiche overlap indices to determine the extent of niche sharing among species within the metacommunity\nThe proportion of habitat patches occupied by each species\nThe variability of community composition across different spatial and temporal scales","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install MetaCommunityMetrics, use the following command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\n\nPkg.add(\"MetaCommunityMetrics\")\n\nusing MetaCommunityMetrics","category":"page"},{"location":"#Function-Documentation","page":"Home","title":"Function Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Beta Diversity\nDNCI\nNiche Overlap Index\nOccupied Patches Proportion\nVariability Metrics","category":"page"}]
}
